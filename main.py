import telebot
import sqlite3
import json
from telebot import types
from config import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('support_requests.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    department TEXT,
    message TEXT,
    status TEXT DEFAULT 'open'
)
''')
conn.commit()

# –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
with open('faq.json', 'r', encoding='utf-8') as faq_file:
    faq_data = json.load(faq_file)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üõí –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    btn2 = types.KeyboardButton("üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏")
    btn3 = types.KeyboardButton("üíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂")
    markup.add(btn1, btn2, btn3)

    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ \"–ü—Ä–æ–¥–∞–µ–º –≤—Å–µ –Ω–∞ —Å–≤–µ—Ç–µ\"!\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ FAQ
def send_faq(message):
    faq_list = "\n\n".join([f"‚ùì *{q}*\n{a}" for q, a in faq_data.items()])
    bot.send_message(message.chat.id, f"*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n{faq_list}", parse_mode="Markdown")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def log_request(user_id, username, department, message):
    cursor.execute('INSERT INTO requests (user_id, username, department, message) VALUES (?, ?, ?, ?)',
                   (user_id, username, department, message))
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.message_handler(func=lambda message: message.text in ["üõí –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏", "üíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂"])
def handle_keyboard_buttons(message):
    user_id = message.from_user.id
    username = message.from_user.username
    user_message = message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    if user_message == "üõí –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        send_faq(message)
    elif user_message == "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏":
        bot.reply_to(message, "üë®‚Äçüíª –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        log_request(user_id, username, '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã', user_message)
    elif user_message == "üíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂":
        bot.reply_to(message, "üíº –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        log_request(user_id, username, '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂', user_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_message(message):
    user_id = message.from_user.id
    username = message.from_user.username
    user_message = message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (FAQ)
    found_answer = None
    department = '–û–±—â–∏–π'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏—Å–≤–æ–∏–º –æ–±—â–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
    for question, answer in faq_data.items():
        if question.lower() in user_message:
            found_answer = answer
            department = 'FAQ'  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ FAQ, —É–∫–∞–∂–µ–º —ç—Ç–æ –∫–∞–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
            break

    if found_answer:
        bot.reply_to(message, found_answer)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º –∏–ª–∏ –æ—Ç–¥–µ–ª—É –ø—Ä–æ–¥–∞–∂
    elif '—Å–∞–π—Ç' in user_message or '–æ–ø–ª–∞—Ç–∞' in user_message:
        department = '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã'
        bot.reply_to(message, "üë®‚Äçüíª –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    elif '—Ç–æ–≤–∞—Ä' in user_message or '–¥–æ—Å—Ç–∞–≤–∫–∞' in user_message:
        department = '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂'
        bot.reply_to(message, "üíº –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    else:
        bot.reply_to(message, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –Ω–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    log_request(user_id, username, department, user_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    user_id = message.from_user.id
    username = message.from_user.username
    file_id = message.voice.file_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Telegram API
    file_info = bot.get_file(file_id)
    voice_file = bot.download_file(file_info.file_path)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    log_request(user_id, username, '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ')

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.reply_to(message, "üé§ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –º—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
